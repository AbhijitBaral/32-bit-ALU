$date
	Fri Apr  4 23:43:58 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_32bitAddSub $end
$var wire 1 ! V $end
$var wire 1 " So $end
$var wire 32 # S [31:0] $end
$var wire 1 $ Cout $end
$var reg 32 % A [31:0] $end
$var reg 32 & B [31:0] $end
$var reg 1 ' Cin $end
$var reg 1 ( D $end
$var reg 1 ) Si $end
$scope module uut $end
$var wire 32 * A [31:0] $end
$var wire 32 + B [31:0] $end
$var wire 32 , Bs [31:0] $end
$var wire 1 - C $end
$var wire 1 ' Cin $end
$var wire 1 ( D $end
$var wire 1 ) Si $end
$var wire 1 " So $end
$var wire 1 ! V $end
$var wire 1 . cinmsb $end
$var wire 32 / S [31:0] $end
$var wire 1 $ Cout $end
$scope module Adder $end
$var wire 32 0 A [31:0] $end
$var wire 32 1 B [31:0] $end
$var wire 1 - Cin $end
$var wire 8 2 carry [7:0] $end
$var wire 32 3 S [31:0] $end
$var wire 1 $ Cout $end
$var wire 1 . CinMSB $end
$scope begin generate_cla[0] $end
$var parameter 2 4 i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 5 A [3:0] $end
$var wire 4 6 B [3:0] $end
$var wire 1 - Cin $end
$var wire 4 7 G [3:0] $end
$var wire 4 8 P [3:0] $end
$var wire 4 9 S [3:0] $end
$var wire 1 : Cout $end
$var wire 1 ; CinMSB $end
$var wire 4 < C [3:0] $end
$scope module carryGen $end
$var wire 1 - Cin $end
$var wire 1 : Cout $end
$var wire 4 = G [3:0] $end
$var wire 4 > P [3:0] $end
$var wire 4 ? C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[1] $end
$var parameter 2 @ i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 A A [3:0] $end
$var wire 4 B B [3:0] $end
$var wire 1 C Cin $end
$var wire 4 D G [3:0] $end
$var wire 4 E P [3:0] $end
$var wire 4 F S [3:0] $end
$var wire 1 G Cout $end
$var wire 1 H CinMSB $end
$var wire 4 I C [3:0] $end
$scope module carryGen $end
$var wire 1 C Cin $end
$var wire 1 G Cout $end
$var wire 4 J G [3:0] $end
$var wire 4 K P [3:0] $end
$var wire 4 L C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[2] $end
$var parameter 3 M i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 N A [3:0] $end
$var wire 4 O B [3:0] $end
$var wire 1 P Cin $end
$var wire 4 Q G [3:0] $end
$var wire 4 R P [3:0] $end
$var wire 4 S S [3:0] $end
$var wire 1 T Cout $end
$var wire 1 U CinMSB $end
$var wire 4 V C [3:0] $end
$scope module carryGen $end
$var wire 1 P Cin $end
$var wire 1 T Cout $end
$var wire 4 W G [3:0] $end
$var wire 4 X P [3:0] $end
$var wire 4 Y C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[3] $end
$var parameter 3 Z i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 [ A [3:0] $end
$var wire 4 \ B [3:0] $end
$var wire 1 ] Cin $end
$var wire 4 ^ G [3:0] $end
$var wire 4 _ P [3:0] $end
$var wire 4 ` S [3:0] $end
$var wire 1 a Cout $end
$var wire 1 b CinMSB $end
$var wire 4 c C [3:0] $end
$scope module carryGen $end
$var wire 1 ] Cin $end
$var wire 1 a Cout $end
$var wire 4 d G [3:0] $end
$var wire 4 e P [3:0] $end
$var wire 4 f C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[4] $end
$var parameter 4 g i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 h A [3:0] $end
$var wire 4 i B [3:0] $end
$var wire 1 j Cin $end
$var wire 4 k G [3:0] $end
$var wire 4 l P [3:0] $end
$var wire 4 m S [3:0] $end
$var wire 1 n Cout $end
$var wire 1 o CinMSB $end
$var wire 4 p C [3:0] $end
$scope module carryGen $end
$var wire 1 j Cin $end
$var wire 1 n Cout $end
$var wire 4 q G [3:0] $end
$var wire 4 r P [3:0] $end
$var wire 4 s C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[5] $end
$var parameter 4 t i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 u A [3:0] $end
$var wire 4 v B [3:0] $end
$var wire 1 w Cin $end
$var wire 4 x G [3:0] $end
$var wire 4 y P [3:0] $end
$var wire 4 z S [3:0] $end
$var wire 1 { Cout $end
$var wire 1 | CinMSB $end
$var wire 4 } C [3:0] $end
$scope module carryGen $end
$var wire 1 w Cin $end
$var wire 1 { Cout $end
$var wire 4 ~ G [3:0] $end
$var wire 4 !" P [3:0] $end
$var wire 4 "" C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[6] $end
$var parameter 4 #" i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 $" A [3:0] $end
$var wire 4 %" B [3:0] $end
$var wire 1 &" Cin $end
$var wire 4 '" G [3:0] $end
$var wire 4 (" P [3:0] $end
$var wire 4 )" S [3:0] $end
$var wire 1 *" Cout $end
$var wire 1 +" CinMSB $end
$var wire 4 ," C [3:0] $end
$scope module carryGen $end
$var wire 1 &" Cin $end
$var wire 1 *" Cout $end
$var wire 4 -" G [3:0] $end
$var wire 4 ." P [3:0] $end
$var wire 4 /" C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin generate_cla[7] $end
$var parameter 4 0" i $end
$scope begin genblk1 $end
$scope module add $end
$var wire 4 1" A [3:0] $end
$var wire 4 2" B [3:0] $end
$var wire 1 3" Cin $end
$var wire 4 4" G [3:0] $end
$var wire 4 5" P [3:0] $end
$var wire 4 6" S [3:0] $end
$var wire 1 $ Cout $end
$var wire 1 . CinMSB $end
$var wire 4 7" C [3:0] $end
$scope module carryGen $end
$var wire 1 3" Cin $end
$var wire 1 $ Cout $end
$var wire 4 8" G [3:0] $end
$var wire 4 9" P [3:0] $end
$var wire 4 :" C [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 0"
b110 #"
b101 t
b100 g
b11 Z
b10 M
b1 @
b0 4
$end
#0
$dumpvars
b1111 :"
b1111 9"
b0 8"
b1111 7"
b0 6"
b1111 5"
b0 4"
13"
b1111 2"
b0 1"
b1111 /"
b1111 ."
b0 -"
b1111 ,"
1+"
1*"
b0 )"
b1111 ("
b0 '"
1&"
b1111 %"
b0 $"
b1111 ""
b1111 !"
b0 ~
b1111 }
1|
1{
b0 z
b1111 y
b0 x
1w
b1111 v
b0 u
b1111 s
b1111 r
b0 q
b1111 p
1o
1n
b0 m
b1111 l
b0 k
1j
b1111 i
b0 h
b1111 f
b1111 e
b0 d
b1111 c
1b
1a
b0 `
b1111 _
b0 ^
1]
b1111 \
b0 [
b1111 Y
b1111 X
b0 W
b1111 V
1U
1T
b0 S
b1111 R
b0 Q
1P
b1111 O
b0 N
b1111 L
b1111 K
b0 J
b1111 I
1H
1G
b0 F
b1111 E
b0 D
1C
b1111 B
b0 A
b1011 ?
b1001 >
b100 =
b1011 <
1;
1:
b10 9
b1001 8
b100 7
b1100 6
b101 5
b10 3
bz1111111 2
b11111111111111111111111111111100 1
b101 0
b10 /
1.
1-
b11111111111111111111111111111100 ,
b11 +
b101 *
1)
1(
0'
b11 &
b101 %
1$
b10 #
1"
0!
$end
#10000
03"
0&"
0w
0j
0]
0H
0b
0o
0|
0+"
0.
1;
1P
0U
b111 I
b111 L
b0 c
b0 f
b0 p
b0 s
b0 }
b0 ""
b0 ,"
b0 /"
b0 7"
b0 :"
0!
b1111 <
b1111 ?
bz0000011 2
b111 V
b111 Y
0T
0a
0n
0{
0*"
0$
1G
b1111101000001 #
b1111101000001 /
b1111101000001 3
b0 m
b0 z
b0 )"
b0 6"
b0 l
b0 r
b0 y
b0 !"
b0 ("
b0 ."
b0 5"
b0 9"
b1 9
b100 F
b1111 S
b1 `
b111 6
b1011 B
b1011 O
b0 \
b0 i
b0 v
b0 %"
b0 2"
b1 7
b1 =
b1110 8
b1110 >
b1000 D
b1000 J
b11 E
b11 K
b11 Q
b11 W
b1000 R
b1000 X
b0 ^
b0 d
b1 _
b1 e
b101110110111 ,
b101110110111 1
b1001 5
b1000 A
b11 N
b1 [
b11111111111111111111010001001000 &
b11111111111111111111010001001000 +
b1001110001001 %
b1001110001001 *
b1001110001001 0
#20000
1.
0!
1$
b1111 7"
b1111 :"
13"
1+"
1*"
b1111 ,"
b1111 /"
1&"
1|
1{
b1111 }
b1111 ""
1w
1o
1n
b1111 p
b1111 s
1j
b0 V
b0 Y
0P
1C
bz1111001 2
1b
1a
0G
1:
b1 I
b1 L
b1110 c
b1110 f
b101110111000 #
b101110111000 /
b101110111000 3
b1011 F
b1011 S
b0 `
b0 m
b0 z
b0 )"
b0 6"
b0 D
b0 J
b1010 E
b1010 K
b0 Q
b0 W
b1011 R
b1011 X
b1 ^
b1 d
b1110 _
b1110 e
b1111 l
b1111 r
b1111 y
b1111 !"
b1111 ("
b1111 ."
b1111 5"
b1111 9"
b1000 9
b1111 6
b10 B
b1000 O
b1111 \
b1111 i
b1111 v
b1111 %"
b1111 2"
b1000 7
b1000 =
b111 8
b111 >
b11111111111111111111100000101111 ,
b11111111111111111111100000101111 1
b1000 5
b11111010000 &
b11111010000 +
b1001110001000 %
b1001110001000 *
b1001110001000 0
#30000
1]
1H
1j
13"
1&"
1w
1T
1o
1|
1+"
bz1111101 2
1.
b1111 I
b1111 L
1a
b1111 p
b1111 s
b1111 }
b1111 ""
b1111 ,"
b1111 /"
b1111 7"
b1111 :"
0!
b1111 c
b1111 f
1n
1{
1*"
b11111111111111111110010010101000 #
b11111111111111111110010010101000 /
b11111111111111111110010010101000 3
1$
b1010 F
b100 S
b1110 `
b1111 m
b1111 z
b1111 )"
b1111 6"
b10 D
b10 J
b101 E
b101 K
b1000 Q
b1000 W
b100 R
b100 X
b1110 ^
b1110 d
b1 _
b1 e
b1111 k
b1111 q
b0 l
b0 r
b1111 x
b1111 ~
b0 y
b0 !"
b1111 '"
b1111 -"
b0 ("
b0 ."
b1111 4"
b1111 8"
b0 5"
b0 9"
b111 A
b1100 N
b1110 [
b1111 h
b1111 u
b1111 $"
b1111 1"
b11111111111111111110110001111000 %
b11111111111111111110110001111000 *
b11111111111111111110110001111000 0
#40000
b1 V
b1 Y
1P
bz1111111 2
b1011 c
b1011 f
1G
b11111111111111111011000111100000 #
b11111111111111111011000111100000 /
b11111111111111111011000111100000 3
b1110 D
b1110 J
b0 9
b1110 F
b1 S
b1011 `
b1110 B
b1101 \
b0 7
b0 =
b1111 8
b1111 >
b1 E
b1 K
b0 R
b0 X
b1101 ^
b1101 d
b0 _
b0 e
b11111111111111111101100011101111 ,
b11111111111111111101100011101111 1
b0 5
b1111 A
b1000 N
b1101 [
b10011100010000 &
b10011100010000 +
b11111111111111111101100011110000 %
b11111111111111111101100011110000 *
b11111111111111111101100011110000 0
#50000
0!
1.
b1111 7"
b1111 :"
13"
1+"
1*"
b1111 ,"
b1111 /"
1&"
1|
1{
b1111 }
b1111 ""
1w
1o
1n
b1111 p
b1111 s
1j
1b
1a
1]
1T
1P
1H
1G
b1111 I
b1111 L
1U
1C
1;
bz1111111 2
b1111 c
b1111 f
b1111 <
b1111 ?
b1111 V
b1111 Y
1:
b10000000000000000000000000000000 #
b10000000000000000000000000000000 /
b10000000000000000000000000000000 3
b0 F
b0 m
b0 z
b0 )"
b1000 6"
b0 D
b0 J
b1111 E
b1111 K
b0 Q
b0 W
b0 ^
b0 d
b0 k
b0 q
b1111 l
b1111 r
b0 x
b0 ~
b1111 y
b1111 !"
b0 '"
b0 -"
b1111 ("
b1111 ."
b1000 4"
b1000 8"
b111 5"
b111 9"
b0 9
b0 S
b0 `
b0 6
b0 B
b0 O
b0 \
b0 i
b0 v
b0 %"
b1000 2"
b0 7
b0 =
b1111 8
b1111 >
b1111 R
b1111 X
b1111 _
b1111 e
b10000000000000000000000000000000 ,
b10000000000000000000000000000000 1
b1111 5
b1111 N
b1111 [
b1111111111111111111111111111111 &
b1111111111111111111111111111111 +
b11111111111111111111111111111111 %
b11111111111111111111111111111111 *
b11111111111111111111111111111111 0
#60000
1!
0.
b111 6"
b0 7"
b0 :"
03"
0+"
0*"
b1111 )"
b0 ,"
b0 /"
0&"
0|
0{
b1111 z
b0 }
b0 ""
0w
0o
0n
b1111 m
b0 p
b0 s
0j
0b
0a
b1111 `
b0 c
b0 f
0]
0U
0T
b1111 S
b0 V
b0 Y
0P
0H
0G
b1111 F
b0 I
b0 L
0C
bz0000000 2
0;
0:
b1 <
b1 ?
b1111111111111111111111111111111 #
b1111111111111111111111111111111 /
b1111111111111111111111111111111 3
b1111 9
b1110 8
b1110 >
b1110 5
b11111111111111111111111111111110 %
b11111111111111111111111111111110 *
b11111111111111111111111111111110 0
#70000
0!
0$
b11 <
b11 ?
b1111111111111111111111111111111 #
b1111111111111111111111111111111 /
b1111111111111111111111111111111 3
b1 7
b1 =
b1111 9
b111 6"
b1 6
b0 2"
b1100 8
b1100 >
b0 4"
b0 8"
b111 5"
b111 9"
b1 ,
b1 1
b1101 5
b111 1"
b11111111111111111111111111111110 &
b11111111111111111111111111111110 +
b1111111111111111111111111111101 %
b1111111111111111111111111111101 *
b1111111111111111111111111111101 0
#80000
1!
1.
b1000 6"
b1111 7"
b1111 :"
13"
1+"
1*"
b0 )"
b1111 ,"
b1111 /"
1&"
1|
1{
b0 z
b1111 }
b1111 ""
1w
1o
1n
b0 m
b1111 p
b1111 s
1j
1b
1a
b0 `
b1111 c
b1111 f
1]
1U
1T
b0 S
b1111 V
b1111 Y
1P
1H
1G
b0 F
b1111 I
b1111 L
1C
bz1111111 2
1;
1:
b1111 <
b1111 ?
b10000000000000000000000000000000 #
b10000000000000000000000000000000 /
b10000000000000000000000000000000 3
b0 9
b0 7
b0 =
b1111 8
b1111 >
b10 6
b10 ,
b10 1
b11111111111111111111111111111101 &
b11111111111111111111111111111101 +
#90000
